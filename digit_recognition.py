# -*- coding: utf-8 -*-
"""digit_recognition.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EeoBBKge41L_xPuBHfIsmh2dMqSun-EZ

## Importing Dataset
"""

import tensorflow as tf
from tensorflow.keras import datasets
from tensorflow.keras import models, layers
import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import classification_report

"""The MNIST dataset is a widely-used benchmark dataset in the field of machine learning and computer vision. It consists of a collection of 28x28 pixel grayscale images of handwritten digits (0 to 9), along with their corresponding labels. The dataset contains 60,000 training images and 10,000 testing images.


"""

(X_train, y_train), (X_test, y_test) = datasets.mnist.load_data()

print('Shape of training images :',X_train.shape)
print('Shape of test images :',X_test.shape)
print('Shape of y_trsin :', y_train.shape)
print('Shape of y_test :', y_test.shape)

"""## Image visualisation"""

def visualise(image, label):
  plt.imshow(image)
  plt.xlabel(label)

visualise(X_train[0], y_train[0])

X_train[0]

"""### Normaization of data"""

X_train = X_train/255
X_train[0]

"""## Modelling"""

ann = models.Sequential([
    layers.Flatten(input_shape=(28,28)),
    layers.Dense(300, activation='relu'),
    layers.Dense(10, activation='sigmoid')
])

ann.compile(optimizer='adam',
            loss='sparse_categorical_crossentropy',
            metrics=['accuracy'])

ann.fit(X_train, y_train, epochs=5)

X_test = X_test/255
y_pred = ann.predict(X_test)
y_pred_class = [np.argmax(element) for element in y_pred]

"""### Accuracy report"""

print(classification_report(y_test, y_pred_class))

"""## CNN model"""

cnn = models.Sequential([
    layers.Conv2D(filters=32, kernel_size=(3,3), activation='relu', input_shape=(28,28,1)),
    layers.MaxPooling2D((2,2)),
    layers.Flatten(input_shape=(28,28)),
    layers.Dense(300, activation='relu'),
    layers.Dense(10, activation='sigmoid')
])

cnn.compile(optimizer='adam',
            loss='sparse_categorical_crossentropy',
            metrics=['accuracy'])

cnn.fit(X_train,y_train, epochs=5)

y_pred = cnn.predict(X_test)
y_pred_class = [np.argmax(element) for element in y_pred]

print(classification_report(y_pred_class, y_test))

